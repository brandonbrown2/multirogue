using SadConsole;
using SadConsole.Consoles;

namespace TechDemo1.Map
{
    class GameMap : RogueSharp.Map
    {
        public SadConsole.CellAppearance[,] mapData;
        protected RogueSharp.PathFinder pathing;
        private Console outputConsole;

        public GameMap(int mapHeight, int mapWidth, Console outputRef) : base(mapHeight, mapWidth)
        {
            outputConsole = outputRef;
            pathing = new RogueSharp.PathFinder(this);

            RogueSharp.MapCreation.IMapCreationStrategy<RogueSharp.Map> mapCreationStrategy
                = new MapTypes.SimpleMapCreationStrategy<RogueSharp.Map>(mapWidth, mapHeight, 100, 30, 10);

            GenerateMap(mapCreationStrategy);
        }
        
        protected virtual void GenerateMap(RogueSharp.MapCreation.IMapCreationStrategy<RogueSharp.Map> mapCreationStrategy)
        {
            // Create the map
            Copy(Create(mapCreationStrategy));

            // Create the local cache of map data
            mapData = new CellAppearance[Width, Height];

            // Loop through the map information generated by RogueSharp and create our cached visuals of that data
            foreach (var cell in GetAllCells())
            {
                if (cell.IsWalkable)
                {
                    // Our local information about each map square
                    mapData[cell.X, cell.Y] = new MapObjects.Floor();

                    // Copy the appearance we've defined for Floor or Wall or whatever, to the actual console data that is rendered
                    mapData[cell.X, cell.Y].CopyAppearanceTo(outputConsole[cell.X, cell.Y]);
                }
                else
                {
                    mapData[cell.X, cell.Y] = new MapObjects.Wall();
                    mapData[cell.X, cell.Y].CopyAppearanceTo(outputConsole[cell.X, cell.Y]);
                }
            }
        }
    }
}
