using RogueSharp;
using RogueSharp.MapCreation;
using RogueSharp.Random;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TechDemo1.MapTypes
{
    public class SimpleMapCreationStrategy<T> : IMapCreationStrategy<T> where T : class, IMap, new()
    {
        private readonly IRandom _random;
        private readonly int _height;
        private readonly int _maxRooms;
        private readonly int _roomMaxSize;
        private readonly int _roomMinSize;
        private readonly int _width;
        /// <summary>
        /// Constructs a new RandomRoomsMapCreationStrategy with the specified parameters
        /// </summary>
        /// <param name="width">The width of the Map to be created</param>
        /// <param name="height">The height of the Map to be created</param>
        /// <param name="maxRooms">The maximum number of rooms that will exist in the generated Map</param>
        /// <param name="roomMaxSize">The maximum width and height of each room that will be generated in the Map</param>
        /// <param name="roomMinSize">The minimum width and height of each room that will be generated in the Map</param>
        /// <param name="random">A class implementing IRandom that will be used to generate pseudo-random numbers necessary to create the Map</param>
        public SimpleMapCreationStrategy(int width, int height, int maxRooms, int roomMaxSize, int roomMinSize, IRandom random)
        {
            _width = width;
            _height = height;
            _maxRooms = maxRooms;
            _roomMaxSize = roomMaxSize;
            _roomMinSize = roomMinSize;
            _random = random;
        }
        /// <summary>
        /// Constructs a new RandomRoomsMapCreationStrategy with the specified parameters
        /// </summary>
        /// <param name="width">The width of the Map to be created</param>
        /// <param name="height">The height of the Map to be created</param>
        /// <param name="maxRooms">The maximum number of rooms that will exist in the generated Map</param>
        /// <param name="roomMaxSize">The maximum width and height of each room that will be generated in the Map</param>
        /// <param name="roomMinSize">The minimum width and height of each room that will be generated in the Map</param>
        /// <remarks>Uses DotNetRandom as its RNG</remarks>
        public SimpleMapCreationStrategy(int width, int height, int maxRooms, int roomMaxSize, int roomMinSize)
        {
            _width = width;
            _height = height;
            _maxRooms = maxRooms;
            _roomMaxSize = roomMaxSize;
            _roomMinSize = roomMinSize;
            _random = Singleton.DefaultRandom;
        }
        /// <summary>
        /// Creates a new IMap of the specified type.
        /// </summary>
        /// <remarks>
        /// The Map will be generated by trying to place rooms up to the maximum number specified in random locations around the Map.
        /// Each room will have a height and width between the minimum and maximum room size.
        /// If a room would be placed in such a way that it overlaps another room, it will not be placed.
        /// Once all rooms have have been placed, or thrown out because they overlap, cooridors will be created between rooms in a random manner.
        /// </remarks>
        /// <returns>An IMap of the specified type</returns>
        public T CreateMap()
        {
            var rooms = new List<Rectangle>();
            var map = new T();
            map.Initialize(_width, _height);
            map.Clear(true, true);

            for (int r = 0; r < _maxRooms; r++)
            {
                int roomWidth = _random.Next(_roomMinSize, _roomMaxSize);
                int roomHeight = _random.Next(_roomMinSize, _roomMaxSize);
                int roomXPosition = _random.Next(0, _width - roomWidth - 1);
                int roomYPosition = _random.Next(0, _height - roomHeight - 1);

                var newRoom = new Rectangle(roomXPosition, roomYPosition, roomWidth, roomHeight);
                bool newRoomIntersects = false;
                foreach (Rectangle room in rooms)
                {
                    if (newRoom.Intersects(room))
                    {
                        newRoomIntersects = true;
                        break;
                    }
                }
                if (!newRoomIntersects)
                {
                    rooms.Add(newRoom);
                }
            }

            foreach (Rectangle room in rooms)
            {
                MakeRoom(map, room);
            }

            for (int r = 0; r < rooms.Count; r++)
            {
                if (r == 0)
                {
                    continue;
                }

                int previousRoomCenterX = rooms[r - 1].Center.X;
                int previousRoomCenterY = rooms[r - 1].Center.Y;
                int currentRoomCenterX = rooms[r].Center.X;
                int currentRoomCenterY = rooms[r].Center.Y;

                if (_random.Next(0, 2) == 0)
                {
                    MakeHorizontalTunnel(map, previousRoomCenterX, currentRoomCenterX, previousRoomCenterY);
                    MakeVerticalTunnel(map, previousRoomCenterY, currentRoomCenterY, currentRoomCenterX);
                }
                else
                {
                    MakeVerticalTunnel(map, previousRoomCenterY, currentRoomCenterY, previousRoomCenterX);
                    MakeHorizontalTunnel(map, previousRoomCenterX, currentRoomCenterX, currentRoomCenterY);
                }
            }

            return map;
        }
        private static void MakeRoom(T map, Rectangle room)
        {
            for (int x = room.Left; x <= room.Right; x++)
            {
                int y = room.Top;
                while (y <= room.Bottom)
                {
                    map.SetCellProperties(x, y, false, false);
                    if ((x == room.Left) || (x == room.Right))
                    {
                        y++;
                    } else
                    {
                        y += room.Height;
                    }
                }
            }
        }
        private static void MakeHorizontalTunnel(T map, int xStart, int xEnd, int yPosition)
        {
            for (int x = Math.Min(xStart, xEnd); x <= Math.Max(xStart, xEnd); x++)
            {
                map.SetCellProperties(x, yPosition, true, true);
            }
        }
        private static void MakeVerticalTunnel(T map, int yStart, int yEnd, int xPosition)
        {
            for (int y = Math.Min(yStart, yEnd); y <= Math.Max(yStart, yEnd); y++)
            {
                map.SetCellProperties(xPosition, y, true, true);
            }
        }
    }
}

